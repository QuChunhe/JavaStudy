plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'jacoco'
}

ext {
    junitVersion = '5.10.0'
    lombokVersion = '1.18.28'
    mapstructVersion = '1.5.5.Final'
    logbackVersion = '1.4.11'
    springVersion = '1.4.11'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
}
repositories {
    maven { url "https://maven.aliyun.com/repository/public" }
    maven { url "https://repo1.maven.org/maven2" }
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation 'com.mysql:mysql-connector-j:8.1.0'
    implementation 'org.apache.flink:flink-java:1.17.1'

    implementation "org.springframework:spring-core:${springVersion}"
    implementation "org.springframework:spring-context:${springVersion}"
    implementation "org.springframework:spring-aop:${springVersion}"
    implementation "org.springframework:spring-aop:${springVersion}"
    implementation 'org.springframework.boot:spring-boot-starter:3.1.5'

    compileOnly 'org.apache.flink:flink-core:1.17.1'
    compileOnly 'org.apache.flink:flink-streaming-java:1.17.1'
    compileOnly 'org.apache.flink:flink-connector-jdbc:3.1.1-1.17'

    implementation 'org.slf4j:slf4j-api:2.0.9'
    testImplementation 'org.slf4j:slf4j-api:2.0.9'
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation "ch.qos.logback:logback-core:${logbackVersion}"
    implementation 'org.fusesource.jansi:jansi:2.4.0'

    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    testImplementation 'org.projectlombok:lombok:1.18.28'
    annotationProcessor "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testImplementation "org.projectlombok:lombok:${lombokVersion}"

    implementation 'redis.clients:jedis:5.0.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:32.1.1-jre'
    implementation 'com.google.code.gson:gson:2.10.1'

    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.9.3')
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'data.structures.App'
}

//https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacoco {
    toolVersion = "0.8.9"
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [])
        }))
    }
}